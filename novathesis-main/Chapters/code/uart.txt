// ===================================================================
// Code for: uart Protocol
// Generated by IOPT API for your 'SystemA' project.
// All generated code is intended for the net_io file.
// Keep in mind if you use this protocol multiple times to implement different events you will get duplicated code, in that case add only what is diferent
// ===================================================================



// ===================================================================
// Code for Receiver Controller (listens for event: 'toggleLED')
// ===================================================================

/*
* PART 1: Place this at the top of your file with the other global variables and includes.
*/
#include <HardwareSerial.h>

// -- UART Configuration --
HardwareSerial MySerial(2);
#define RXD2 16
#define TXD2 17

// -- Message and Flag Definitions --
const String message_uart_toggleLED = "trigger_toggleLED";
volatile bool toggleLED_trigger_flag = 0; // flag only for receiving signals

// -- Function Prototypes --
void setupUart_toggleLED();
String receiveDataUart();
void waitMessageUart();

/*
* PART 2: Place this inside your 'SystemA_InitializeIO()' function.
*/
setupUart_toggleLED();

/*
* PART 3: Place this inside your 'SystemA_GetInputSignals()' function.
*/
waitMessageUart();
if (toggleLED_trigger_flag == 1) {
events->toggleLED = 1;
toggleLED_trigger_flag = 0; // Reset the flag to fire only once
} else {
events->toggleLED = 0; // Ensure the event is inactive by default
}

/*
* PART 4: Place this at the bottom of your file with the other helper functions.
*/
void setupUart_toggleLED() {
MySerial.begin(9600, SERIAL_8N1, RXD2, TXD2);
Serial.println("UART communication initialized (Receiver).");
}

String receiveDataUart() {
if (MySerial.available()) {
String data = MySerial.readStringUntil('\n');
data.trim();
return data;
}
return "";
}

void waitMessageUart() {
String receivedMessage = receiveDataUart();
if (receivedMessage.length() > 0 && receivedMessage == message_uart_toggleLED) {
toggleLED_trigger_flag = 1;
Serial.println("Correct message received. Flag for 'toggleLED' activated.");
}
}


// ===================================================================
// Code for Sender Controller (sends event: 'toggleLED')
// ===================================================================

/*
* PART 1: Place this at the top of your file with the other global variables and includes.
*/
#include <HardwareSerial.h>

// -- UART Configuration --
HardwareSerial MySerial(2);
#define RXD2 17
#define TXD2 16

// -- Message Definitions --
const String message_uart_toggleLED = "trigger_toggleLED";

// -- Function Prototypes --
void setupUart_toggleLED();
void sendDataUart(String message);

/*
* PART 2: Place this inside your 'SystemA_InitializeIO()' function.
*/
setupUart_toggleLED();

/*
* PART 3: Place this inside your 'SystemA_PutOutputSignals()' function.
*/
if (events->toggleLED == 1) {
sendDataUart(message_uart_toggleLED);
events->toggleLED = 0; // IMPORTANT: Reset the event
}

/*
* PART 4: Place this at the bottom of your file with the other helper functions.
*/
void setupUart_toggleLED() {
MySerial.begin(9600, SERIAL_8N1, RXD2, TXD2);
Serial.println("UART communication initialized (Sender).");
}

void sendDataUart(String message) {
MySerial.println(message);
Serial.print("Message sent: ");
Serial.println(message);
}