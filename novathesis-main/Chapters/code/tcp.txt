// ===================================================================
// Code for: tcp Protocol
// Generated by IOPT API for your 'SensorNetwork' project.
// All generated code is intended for the net_io file.
// Keep in mind if you use this protocol multiple times to implement different events you will get duplicated code, in that case add only what is diferent
// ===================================================================

// ===================================================================
// Listener Controller (listens for event: 'alert')
// ===================================================================

/*
* PART 1: Place at the top with other globals
*/
#include <WiFi.h>
#include <PubSubClient.h>

const char* ssid = "yourNetworkName";
const char* password = "yourNetworkPassword";

const char* mqtt_broker = "broker.hivemq.com";
const int mqtt_port = 1883;
const char* client_id = "ESP32_IOPT";
const char* topic_sub_alert = "sensors/events";

const char* message_tcp_alert = "trigger_alert";
volatile bool alert_trigger_flag = 0;

WiFiClient espClient;
PubSubClient client(espClient);

void tcpMqttInitializeIO();
void reconnect(const char* topic);
void loopDelayTcp(const char* topic);
void callback(char* topic, byte* payload, unsigned int length);

/*
* PART 2: Place inside SensorNetwork_InitializeIO()
*/
tcpMqttInitializeIO();

/*
* PART 3: Place inside SensorNetwork_GetInputSignals()
*/
if (alert_trigger_flag) {
events->alert = 1;
alert_trigger_flag = 0;
} else {
events->alert = 0;
}

/*
* PART 4: Place inside SensorNetwork_LoopDelay()
*/
loopDelayTcp(topic_sub_alert);


/*
* PART 5: Helper functions (place at the bottom)
*/
void tcpMqttInitializeIO() {
Serial.begin(115200);
WiFi.begin(ssid, password);
Serial.print("Connecting to WiFi...");
while (WiFi.status() != WL_CONNECTED) {
delay(500);
Serial.print(".");
}
Serial.println("\nWiFi connected!");
client.setServer(mqtt_broker, mqtt_port);
client.setCallback(callback);
}

void reconnect(const char* topic) {
while (!client.connected()) {
Serial.print("Connecting to MQTT broker...");
if (client.connect(client_id)) {
Serial.println("connected!");
client.subscribe(topic);
} else {
Serial.print("failed, rc=");
Serial.println(client.state());
delay(5000);
}
}
}

void loopDelayTcp(const char* topic) {
if (!client.connected()) {
reconnect(topic);
}
client.loop();
}

void callback(char* topic, byte* payload, unsigned int length) {
String msg = "";
for (int i=0; i<length; i++) msg += (char)payload[i];
msg.trim();
if (msg == String(message_tcp_alert)) {
alert_trigger_flag = 1;
Serial.println("Correct TCP message received. Flag activated for 'alert'.");
}
}


// ===================================================================
// Publisher Controller (sends event: 'alert')
// ===================================================================

/*
* PART 1: Place at the top with other globals
*/
#include <WiFi.h>
#include <PubSubClient.h>

const char* ssid_s = "yourNetworkName";
const char* password_s = "yourNetworkPassword";

const char* mqtt_broker_s = "broker.hivemq.com";
const int mqtt_port_s = 1883;
const char* client_id_s = "ESP32_IOPTSender";
const char* topic_pub_alert = "sensors/events";

const char* message_tcp_alert = "trigger_alert";

WiFiClient espClient_s;
PubSubClient client_s(espClient_s);

void tcpMqttInitializeIO_Sender();
void reconnectSender(const char* topic);
void loopDelayTcpSender(const char* topic);
void sendMessageTcp(const char* topic, const char* message);

/*
* PART 2: Place inside SensorNetwork_InitializeIO()
*/
tcpMqttInitializeIO_Sender();

/*
* PART 3: Place inside SensorNetwork_PutOutputSignals()
*/
if (events->alert == 1) {
sendMessageTcp(topic_pub_alert, message_tcp_alert);
events->alert = 0;
}

/*
* PART 4: Place inside SensorNetwork_LoopDelay()
*/
loopDelayTcp(topic_pub_alert);

/*
* PART 5: Helper functions (place at the bottom)
*/
void tcpMqttInitializeIO_Sender() {
Serial.begin(115200);
WiFi.begin(ssid_s, password_s);
Serial.print("Connecting to WiFi...");
while (WiFi.status() != WL_CONNECTED) {
delay(500);
Serial.print(".");
}
Serial.println("\nWiFi connected!");
client_s.setServer(mqtt_broker_s, mqtt_port_s);
}

void reconnectSender(const char* topic) {
while (!client_s.connected()) {
Serial.print("Connecting to MQTT broker...");
if (client_s.connect(client_id_s)) {
Serial.println("connected!");
} else {
Serial.print("failed, rc=");
Serial.println(client_s.state());
delay(5000);
}
}
}

void loopDelayTcpSender(const char* topic) {
if (!client_s.connected()) {
reconnectSender(topic);
}
client_s.loop();
}

void sendMessageTcp(const char* topic, const char* message) {
Serial.print("Event detected! Publishing to topic: ");
Serial.println(topic);
client_s.publish(topic, message);
}