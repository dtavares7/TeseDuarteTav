// ===================================================================
// Code for: i2c Protocol
// Generated by IOPT API for your 'DemoProject' project.
// All generated code is intended for the net_io file.
// Keep in mind if you use this protocol multiple times to implement different events you will get duplicated code, in that case add only what is diferent
// ===================================================================

// ===================================================================
// Code for Slave controller
// ===================================================================

/*
* PART 1: Place this at the top of your file with the other global variables and includes.
*/
#include <Wire.h>
#define I2C_SLAVE_ADDRESS_for_buttonPress 9 // Address for this device
#define CMD_TRIGGER_buttonPress 'P' // Command to activate the event
volatile bool buttonPress_trigger_flag = 0;
void receiveI2CEvent(int byteCount); // Function prototype


/*
* PART 2: Place this inside your 'DemoProject_InitializeIO()' function.
*/
// Start the I2C bus as a slave with the defined address
Wire.begin(I2C_SLAVE_ADDRESS_for_buttonPress);
// Register the callback function that will be called when receiving data
Wire.onReceive(receiveI2CEvent);


/*
* PART 3: Place this inside your 'DemoProject_GetInputSignals()' function.
*/
if (buttonPress_trigger_flag == 1) {
events->buttonPress = 1;
buttonPress_trigger_flag = 0; // Reset the flag to fire only once
} else {
events->buttonPress = 0; // Ensure the event is inactive by default
}


/*
* PART 4: Place this at the bottom of your file with the other helper functions.
*/
void receiveI2CEvent(int byteCount) {
if (Wire.available() > 0) {
char command = Wire.read();
if (command == CMD_TRIGGER_buttonPress) {
buttonPress_trigger_flag = 1;
}
}
while (Wire.available() > 0) {
Wire.read();
}
}

// ===================================================================
// Code for Master controller
// ===================================================================


/*
* PART 1: Place this at the top of your file with the other global variables and includes.
*/
#include <Wire.h>
#define I2C_SLAVE_ADDRESS_for_buttonPress 9 // Address for this device
#define CMD_TRIGGER_buttonPress 'P' // Command to activate the event
void triggerMasterSendSlaveEvent(byte slaveAddress, byte command);


/*
* PART 2: Place this inside your 'DemoProject_InitializeIO()' function.
*/
while (!Serial); // Wait for Serial to be ready
Wire.begin(); // Start the I2C bus as a Master
Serial.println("I2C Master Initialized.");


/*
* PART 3: Place this inside your 'DemoProject_OutputSignals()' function.
*/
if (events->buttonPress == 1) {
triggerMasterSendSlaveEvent(I2C_SLAVE_ADDRESS_for_buttonPress,CMD_TRIGGER_buttonPress);
}



/*
* PART 4: Place this at the bottom of your file with the other helper functions.
*/
void triggerMasterSendSlaveEvent(byte slaveAddress, byte command) {
Serial.println("Attempting to send command to slave...");

// Step 1: Begin a transmission to the I2C slave device
Wire.beginTransmission(slaveAddress);

// Step 2: Send the command byte
Wire.write(command);

// Step 3: Stop the transmission and send the data
byte error = Wire.endTransmission();

// Check the status of the transmission
if (error == 0) {
Serial.println("Command sent successfully!");
} else {
Serial.print("Error sending command. Error code: ");
Serial.println(error);
Serial.println("Check connections and slave address.");
}
}